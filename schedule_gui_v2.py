import pandas as pd
from datetime import datetime, timedelta
import re, os
import tkinter as tk
from tkinter import messagebox, filedialog, scrolledtext

DAYS = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
WEEK_RE = re.compile(r'(\d{2}\.\d{2}\.\d{2})\s*-\s*(\d{2}\.\d{2}\.\d{2})')

def base_subject(name: str) -> str:
    return re.split(r'[,(]', name, 1)[0].strip().lower()

def parse_schedule(file_path):
    df = pd.read_excel(file_path, header=None)
    schedule = []
    current_week = None
    current_day = None

    for _, row in df.iterrows():
        cell_6 = str(row[6])
        m = WEEK_RE.search(cell_6)
        if m:
            current_week = {
                'range': f"{m.group(1)}-{m.group(2)}",
                'start': datetime.strptime(m.group(1), '%d.%m.%y').date(),
                'end'  : datetime.strptime(m.group(2), '%d.%m.%y').date()
            }
            continue

        day_candidate = str(row[0]).strip()
        if day_candidate in DAYS:
            current_day = day_candidate

        if not (current_week and current_day):
            continue

        subject_full = str(row[5]).strip()
        if not subject_full or subject_full.lower() == '–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã':
            continue

        schedule.append({
            'date': current_week['start'] + timedelta(days=DAYS.index(current_day)),
            'time': str(row[2]).strip(),
            'room': str(row[4]).strip(),
            'subject': subject_full,
            'subject_id': base_subject(subject_full),
            'teacher': cell_6.strip(),
            'week': current_week['range']
        })

    return pd.DataFrame(schedule).drop_duplicates(
        subset=['date', 'time', 'room', 'subject', 'teacher']
    )

def search():
    file_path = file_path_var.get()
    mode = search_mode.get()
    keyword = keyword_entry.get().strip().lower()
    result_box.delete('1.0', tk.END)

    if not file_path or not keyword:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
        return

    if not os.path.exists(file_path):
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        df_sched = parse_schedule(file_path)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
        return

    if mode == 'subject':
        out = df_sched[df_sched['subject_id'] == keyword]
    else:
        mask = df_sched['teacher'].str.lower().str.contains(rf'\b{keyword}\b')
        out = df_sched[mask]

    if out.empty:
        result_box.insert(tk.END, "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    output_lines = []
    group_name = os.path.splitext(os.path.basename(file_path))[0]

    output_lines.append(f"üë• –ì—Ä—É–ø–ø–∞: {group_name}")
    if mode == 'subject':
        output_lines.append(f"üìö –ü—Ä–µ–¥–º–µ—Ç: {out.iloc[0]['subject']}")
    else:
        output_lines.append(f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {out.iloc[0]['teacher']}")
    output_lines.append("üìÖ –î–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π:")

    for i, row in enumerate(out.sort_values(['date', 'time']).itertuples(), 1):
        output_lines.append(f"{i:2}. {row.date:%d.%m.%Y} ({row.time}, {row.room}, {row.teacher})")

    output_lines.append(f"\nüî¢ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π     : {len(out)}")
    output_lines.append(f"üóìÔ∏è  –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ –Ω–µ–¥–µ–ª—å: {out['week'].nunique()}")

    result_text = "\n".join(output_lines)
    result_box.insert(tk.END, result_text)

    txt_name = os.path.splitext(file_path)[0] + '_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt'
    with open(txt_name, 'w', encoding='utf-8') as f:
        f.write(result_text)
    messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{txt_name}")

def choose_file():
    path = filedialog.askopenfilename(
        title="–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª",
        filetypes=[("Excel files", "*.xlsx")]
    )
    if path:
        file_path_var.set(path)

# ---------------- GUI ----------------
root = tk.Tk()
root.title("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π")
root.geometry("700x600")

messagebox.showinfo("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", "–ê–≤—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å–µ—Ç,\n–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞—Ç—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.")

tk.Button(root, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=choose_file).pack(pady=5)
file_path_var = tk.StringVar()
tk.Entry(root, textvariable=file_path_var, width=70).pack(pady=5)

search_mode = tk.StringVar(value='subject')
tk.Radiobutton(root, text="–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É", variable=search_mode, value='subject').pack(anchor='w')
tk.Radiobutton(root, text="–ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", variable=search_mode, value='teacher').pack(anchor='w')

tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:").pack()
keyword_entry = tk.Entry(root, width=50)
keyword_entry.pack(pady=5)

tk.Button(root, text="–ù–∞–π—Ç–∏", command=search).pack(pady=10)

result_box = scrolledtext.ScrolledText(root, width=80, height=25)
result_box.pack()

root.mainloop()
