{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e0c20701-3c53-4c3e-a604-4ac95ecd5734",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from datetime import datetime, timedelta\n",
    "import re, os\n",
    "import tkinter as tk\n",
    "from tkinter import messagebox, filedialog, scrolledtext\n",
    "\n",
    "DAYS = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']\n",
    "WEEK_RE = re.compile(r'(\\d{2}\\.\\d{2}\\.\\d{2})\\s*-\\s*(\\d{2}\\.\\d{2}\\.\\d{2})')\n",
    "\n",
    "def base_subject(name: str) -> str:\n",
    "    return re.split(r'[,(]', name, 1)[0].strip().lower()\n",
    "\n",
    "def parse_schedule(file_path):\n",
    "    df = pd.read_excel(file_path, header=None)\n",
    "    schedule = []\n",
    "    current_week = None\n",
    "    current_day = None\n",
    "\n",
    "    for _, row in df.iterrows():\n",
    "        cell_6 = str(row[6])\n",
    "        m = WEEK_RE.search(cell_6)\n",
    "        if m:\n",
    "            current_week = {\n",
    "                'range': f\"{m.group(1)}-{m.group(2)}\",\n",
    "                'start': datetime.strptime(m.group(1), '%d.%m.%y').date(),\n",
    "                'end'  : datetime.strptime(m.group(2), '%d.%m.%y').date()\n",
    "            }\n",
    "            continue\n",
    "\n",
    "        day_candidate = str(row[0]).strip()\n",
    "        if day_candidate in DAYS:\n",
    "            current_day = day_candidate\n",
    "\n",
    "        if not (current_week and current_day):\n",
    "            continue\n",
    "\n",
    "        subject_full = str(row[5]).strip()\n",
    "        if not subject_full or subject_full.lower() == '–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã':\n",
    "            continue\n",
    "\n",
    "        schedule.append({\n",
    "            'date': current_week['start'] + timedelta(days=DAYS.index(current_day)),\n",
    "            'time': str(row[2]).strip(),\n",
    "            'room': str(row[4]).strip(),\n",
    "            'subject': subject_full,\n",
    "            'subject_id': base_subject(subject_full),\n",
    "            'teacher': cell_6.strip(),\n",
    "            'week': current_week['range']\n",
    "        })\n",
    "\n",
    "    return pd.DataFrame(schedule).drop_duplicates(\n",
    "        subset=['date', 'time', 'room', 'subject', 'teacher']\n",
    "    )\n",
    "\n",
    "def search():\n",
    "    file_path = file_path_var.get()\n",
    "    mode = search_mode.get()\n",
    "    keyword = keyword_entry.get().strip().lower()\n",
    "    result_box.delete('1.0', tk.END)\n",
    "\n",
    "    if not file_path or not keyword:\n",
    "        messagebox.showerror(\"–û—à–∏–±–∫–∞\", \"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\")\n",
    "        return\n",
    "\n",
    "    if not os.path.exists(file_path):\n",
    "        messagebox.showerror(\"–û—à–∏–±–∫–∞\", f\"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.\")\n",
    "        return\n",
    "\n",
    "    try:\n",
    "        df_sched = parse_schedule(file_path)\n",
    "    except Exception as e:\n",
    "        messagebox.showerror(\"–û—à–∏–±–∫–∞\", f\"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\\n{e}\")\n",
    "        return\n",
    "\n",
    "    if mode == 'subject':\n",
    "        out = df_sched[df_sched['subject_id'] == keyword]\n",
    "    else:\n",
    "        mask = df_sched['teacher'].str.lower().str.contains(rf'\\b{keyword}\\b')\n",
    "        out = df_sched[mask]\n",
    "\n",
    "    if out.empty:\n",
    "        result_box.insert(tk.END, \"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\")\n",
    "        return\n",
    "\n",
    "    output_lines = []\n",
    "    group_name = os.path.splitext(os.path.basename(file_path))[0]\n",
    "\n",
    "    output_lines.append(f\"üë• –ì—Ä—É–ø–ø–∞: {group_name}\")\n",
    "    if mode == 'subject':\n",
    "        output_lines.append(f\"üìö –ü—Ä–µ–¥–º–µ—Ç: {out.iloc[0]['subject']}\")\n",
    "    else:\n",
    "        output_lines.append(f\"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {out.iloc[0]['teacher']}\")\n",
    "    output_lines.append(\"üìÖ –î–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π:\")\n",
    "\n",
    "    for i, row in enumerate(out.sort_values(['date', 'time']).itertuples(), 1):\n",
    "        output_lines.append(f\"{i:2}. {row.date:%d.%m.%Y} ({row.time}, {row.room}, {row.teacher})\")\n",
    "\n",
    "    output_lines.append(f\"\\nüî¢ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π     : {len(out)}\")\n",
    "    output_lines.append(f\"üóìÔ∏è  –ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ –Ω–µ–¥–µ–ª—å: {out['week'].nunique()}\")\n",
    "\n",
    "    result_text = \"\\n\".join(output_lines)\n",
    "    result_box.insert(tk.END, result_text)\n",
    "\n",
    "    txt_name = os.path.splitext(file_path)[0] + '_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.txt'\n",
    "    with open(txt_name, 'w', encoding='utf-8') as f:\n",
    "        f.write(result_text)\n",
    "    messagebox.showinfo(\"–ì–æ—Ç–æ–≤–æ\", f\"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\\n{txt_name}\")\n",
    "\n",
    "def choose_file():\n",
    "    path = filedialog.askopenfilename(\n",
    "        title=\"–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª\",\n",
    "        filetypes=[(\"Excel files\", \"*.xlsx\")]\n",
    "    )\n",
    "    if path:\n",
    "        file_path_var.set(path)\n",
    "\n",
    "# ---------------- GUI ----------------\n",
    "root = tk.Tk()\n",
    "root.title(\"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\")\n",
    "root.geometry(\"700x600\")\n",
    "\n",
    "messagebox.showinfo(\"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\", \"–ê–≤—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å–µ—Ç,\\n–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞—Ç—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\")\n",
    "\n",
    "tk.Button(root, text=\"–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª\", command=choose_file).pack(pady=5)\n",
    "file_path_var = tk.StringVar()\n",
    "tk.Entry(root, textvariable=file_path_var, width=70).pack(pady=5)\n",
    "\n",
    "search_mode = tk.StringVar(value='subject')\n",
    "tk.Radiobutton(root, text=\"–ü–æ –ø—Ä–µ–¥–º–µ—Ç—É\", variable=search_mode, value='subject').pack(anchor='w')\n",
    "tk.Radiobutton(root, text=\"–ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é\", variable=search_mode, value='teacher').pack(anchor='w')\n",
    "\n",
    "tk.Label(root, text=\"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\").pack()\n",
    "keyword_entry = tk.Entry(root, width=50)\n",
    "keyword_entry.pack(pady=5)\n",
    "\n",
    "tk.Button(root, text=\"–ù–∞–π—Ç–∏\", command=search).pack(pady=10)\n",
    "\n",
    "result_box = scrolledtext.ScrolledText(root, width=80, height=25)\n",
    "result_box.pack()\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86ae05bc-9c25-4c0b-8eef-2731345e9b70",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
